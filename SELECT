SELECT NOPEMAIN, NAMA, TANGGAL_LAHIR
FROM PEMAIN
WHERE KOTA = 'Siantar'
ORDER BY NAMA;

SELECT NOPEMAIN
FROM PEMAIN
WHERE BERGABUNG > 2000
ORDER BY NOPEMAIN;

SELECT * FROM HUKUMAN;

SELECT 18*10

SELECT * FROM HUKUMAN
WHERE JUMLAH = 25 ;

CREATE INDEX JUMLAH_HUKUMAN
ON HUKUMAN(JUMLAH) ;

SELECT @@VERSION ; #INI TERMASUK SISTEM QUERYING

SELECT NOTIM AS NOMOR_TIM, NOPEMAIN AS NOMOR_PEMAIN
FROM TIM ;

SELECT JUMLAH * 1000000 AS RUPIAH
FROM HUKUMAN
GROUP BY RUPIAH
ORDER BY RUPIAH ;

SET @NOPEMAIN = 7 ; #MENGINISIALISASI VARIABEL, CARA PAKI:

SELECT @NOPEMAIN ;

SELECT NAMA, KOTA, KODEPOS
FROM PEMAIN
WHERE NOPEMAIN < @NOPEMAIN ; #@NOPEMAIN DISINI ADALAH VARIABEL YG TELAH DIDEF SEBELUMNYA, YAKNI ANGKA 7

#VARIABEL SISTEM
#CURRENT_DATE
#CURRENT_TIME
#CURRENT_TIMESTAMP
#CURRENT_USER

SELECT CURRENT_DATE ;
SELECT CURRENT_TIME ;
SELECT CURRENT_TIMESTAMP ;
SELECT CURRENT_USER ;

SELECT NOPEMAIN,CASE JENIS_KELAMIN
WHEN 'P' THEN 'Perempuan'
WHEN 'L' THEN 'Laki-Laki' END AS JENIS_KELAMIN,
NAMA
FROM PEMAIN
WHERE BERGABUNG > 2000 ;

SELECT NOPEMAIN,CASE JENIS_KELAMIN
WHEN 'P' THEN 'PEREMPUAN'
WHEN 'L' THEN 'LAKI-LAKI' END

FROM PEMAIN ; #PERHATIKAN KALAU BUKAN PAKAI END AS, HASILNYA JADI PANJANG GA JELAS
#SEBAIKNYA PAKAI END AS SUPAYA NAMA DIALIASKAN

SELECT NOPEMAIN, CASE JENIS_KELAMIN
WHEN 'P' THEN 'PEREMPUAN' END AS JENIS_KELAMIN,
NAMA
FROM PEMAIN 
WHERE BERGABUNG > 2000 ; #KALAU ADA YG BELUM DIDEFINISIKAN, CONTOHNYA 'L'
#MAKA 'L' AKAN MENGHASILKAN NULL

SELECT NOPEMAIN, CASE KOTA
WHEN 'Siantar' THEN 0
WHEN 'Medan' THEN 1
WHEN 'Bandung' THEN 2
ELSE 3
END
FROM PEMAIN ; #MASIH BLM NGERTI SIH PAKAI ELSE 3 INI

SELECT NOPEMAIN, BERGABUNG,
CASE
WHEN BERGABUNG < 1995 THEN 'SENIOR'
WHEN BERGABUNG >= 1995 THEN 'JUNIOR' 
END AS KELOMPOK_PEMAIN
FROM PEMAIN
ORDER BY BERGABUNG
;

#PAKAI WHEN THEN WHEN THEN



#######################################


SELECT * FROM . . . 
ORDER BY . . . ;

SELECT * FROM . . .
WHERE NAMA LIKE "% . . . %" ;

SELECT *
FROM . . .
LIMIT 0,5 (?); 
bukannya cukup angka 5 aja--
cek commenting--

SELECT SUM(. . . ) AS . . . 
FROM . . . ;

SELECT MAX( . . . ) AS . . .
FROM . . . ;


